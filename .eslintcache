[{"E:\\Projects\\speechly_expense_tracker\\src\\index.js":"1","E:\\Projects\\speechly_expense_tracker\\src\\App.js":"2","E:\\Projects\\speechly_expense_tracker\\src\\reportWebVitals.js":"3","E:\\Projects\\speechly_expense_tracker\\src\\component\\Details\\Details.jsx":"4","E:\\Projects\\speechly_expense_tracker\\src\\component\\Details\\style.js":"5","E:\\Projects\\speechly_expense_tracker\\src\\style.js":"6","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\Main.jsx":"7","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\style.js":"8","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\Form\\Form.jsx":"9","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\Form\\style.js":"10","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\List\\List.jsx":"11","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\List\\style.js":"12","E:\\Projects\\speechly_expense_tracker\\src\\context\\context.js":"13","E:\\Projects\\speechly_expense_tracker\\src\\context\\contextReducer.js":"14","E:\\Projects\\speechly_expense_tracker\\src\\constants\\category.js":"15","E:\\Projects\\speechly_expense_tracker\\src\\utils\\formatDate.js":"16","E:\\Projects\\speechly_expense_tracker\\src\\useTransaction.js":"17","E:\\Projects\\speechly_expense_tracker\\src\\component\\Snackbar\\Snackbar.jsx":"18","E:\\Projects\\speechly_expense_tracker\\src\\component\\Snackbar\\style.js":"19"},{"size":691,"mtime":1609314972061,"results":"20","hashOfConfig":"21"},{"size":912,"mtime":1609307670179,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":727,"mtime":1609257164146,"results":"24","hashOfConfig":"21"},{"size":249,"mtime":1609227806523,"results":"25","hashOfConfig":"21"},{"size":551,"mtime":1609228645131,"results":"26","hashOfConfig":"21"},{"size":1281,"mtime":1609337113474,"results":"27","hashOfConfig":"21"},{"size":512,"mtime":1609229306461,"results":"28","hashOfConfig":"21"},{"size":5374,"mtime":1609336174193,"results":"29","hashOfConfig":"21"},{"size":245,"mtime":1609230346648,"results":"30","hashOfConfig":"21"},{"size":1649,"mtime":1609244995332,"results":"31","hashOfConfig":"21"},{"size":414,"mtime":1609231420523,"results":"32","hashOfConfig":"21"},{"size":933,"mtime":1609334392683,"results":"33","hashOfConfig":"21"},{"size":604,"mtime":1609333728473,"results":"34","hashOfConfig":"21"},{"size":1691,"mtime":1609245280413,"results":"35","hashOfConfig":"21"},{"size":368,"mtime":1609251510155,"results":"36","hashOfConfig":"21"},{"size":1161,"mtime":1609257078582,"results":"37","hashOfConfig":"21"},{"size":1061,"mtime":1609336699708,"results":"38","hashOfConfig":"21"},{"size":204,"mtime":1609335041400,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"amiwpu",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"E:\\Projects\\speechly_expense_tracker\\src\\index.js",[],["81","82"],"E:\\Projects\\speechly_expense_tracker\\src\\App.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\reportWebVitals.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Details\\Details.jsx",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Details\\style.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\style.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\Main.jsx",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\style.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\Form\\Form.jsx",["83"],"import React, {useState,useEffect,useContext} from 'react';\r\nimport {TextField,Typography,MenuItem,Grid,Select,InputLabel,FormControl,Button} from '@material-ui/core'\r\nimport {v4 as uuidV4} from 'uuid'\r\nimport {useSpeechContext} from '@speechly/react-client'\r\nimport {incomeCategories,expenseCategories} from '../../../constants/category'\r\nimport {ExpenseTrackerContext} from '../../../context/context'\r\n\r\nimport formatDate from '../../../utils/formatDate'\r\nimport useStyle from './style'\r\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\r\n\r\nconst initialState = {\r\n    amount:\"\",\r\n    category:'',\r\n    type:'Income',\r\n    date:formatDate(new Date())\r\n}\r\n\r\nconst Form = () => {\r\n    const classes = useStyle()\r\n    const {addTransaction} = useContext(ExpenseTrackerContext)\r\n    const [formData, setFormData] = useState(initialState)\r\n    const [open, setOpen] = useState(false)\r\n    const {segment} = useSpeechContext()\r\n\r\n    const createTransaction = () => {\r\n        if(isNaN(Number(formData.amount)) || !formData.date.includes('-')) {\r\n            return;\r\n        }\r\n        const transaction = {...formData, amount:+formData.amount , id : uuidV4()}\r\n        setOpen(true)\r\n        addTransaction(transaction)\r\n        setFormData(initialState)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(segment){\r\n            // console.log(segment.intent.intent)\r\n            if(segment.intent.intent === 'add_expense'){\r\n                setFormData({...formData,type:\"Expense\"});\r\n            }else if(segment.intent.intent === 'add_income'){\r\n                setFormData({...formData,type:\"Income\"});\r\n            }else if(segment.isFinal && segment.intent.intent === 'create_transaction'){\r\n                return createTransaction();\r\n            }else if(segment.isFinal && segment.intent.intent === 'cancel_transaction'){\r\n                return setFormData(initialState)\r\n            }\r\n\r\n            segment.entities.forEach(_e => {\r\n                const category = `${_e.value.charAt(0)}${_e.value.slice(1).toLowerCase()}`\r\n                switch (_e.type) {\r\n                    case 'amount':\r\n                        setFormData({...formData,amount:_e.value})\r\n                        break;\r\n                    case 'category':\r\n                        if(incomeCategories.map(_c => _c.type).includes(category)){\r\n                            setFormData({...formData, type:'Income', category})\r\n                        }else if(expenseCategories.map(_c => _c.type).includes(category)){\r\n                            setFormData({...formData, type:'Expense', category})\r\n                        }\r\n                        break;\r\n                    case 'date':\r\n                        setFormData({...formData,date:_e.value})\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n\r\n            if(segment.isFinal && formData.amount && formData.category && formData.date && formData.type){\r\n                createTransaction();\r\n            }\r\n\r\n        }\r\n    },[segment])\r\n\r\n    const selectedCatg = formData.type === 'Income' ? incomeCategories : expenseCategories\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <CustomizedSnackbar open={open} setOpen={setOpen} />\r\n            <Grid item xs={12}>\r\n                <Typography variant=\"subtitle2\" align=\"center\" gutterBottom >\r\n                    {\r\n                    segment && \r\n                        <>\r\n                            {\r\n                                segment.words.map((w)=>w.value).join(\" \")   \r\n                            }\r\n                        </>\r\n                    }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select value={formData.type} onChange={(e)=>setFormData({...formData,type:e.target.value})} >\r\n                        <MenuItem value=\"Income\" >Income</MenuItem>\r\n                        <MenuItem value=\"Expense\" >Expense</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select value={formData.category} onChange={(e)=>setFormData({...formData,category:e.target.value})}>\r\n                        {\r\n                            selectedCatg.map((_cat,i)=>(\r\n                                <MenuItem key={i} value={_cat.type} >{_cat.type}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField type=\"number\" fullWidth label=\"Amount\" value={formData.amount} onChange={(e)=>setFormData({...formData,amount:e.target.value})} />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField type=\"date\" fullWidth label=\"Date\" value={formData.date} onChange={(e)=>setFormData({...formData,date:formatDate(e.target.value)})} />\r\n            </Grid>\r\n            <Button fullWidth className={classes.button} color=\"primary\" variant=\"outlined\" onClick={createTransaction} >Create</Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\Form\\style.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\List\\List.jsx",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Main\\List\\style.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\context\\context.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\context\\contextReducer.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\constants\\category.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\utils\\formatDate.js",[],["84","85"],"E:\\Projects\\speechly_expense_tracker\\src\\useTransaction.js",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Snackbar\\Snackbar.jsx",[],"E:\\Projects\\speechly_expense_tracker\\src\\component\\Snackbar\\style.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":75,"column":7,"nodeType":"92","endLine":75,"endColumn":16,"suggestions":"93"},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["98"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"101","text":"102"},[3055,3064],"[createTransaction, formData, segment]"]